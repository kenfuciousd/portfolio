Django_Project_Notes.txt


React for the front end

portfolio projects: 
"Three body problem" Gravity Simulator? Maybe give the mass some momentum based on the avereage mouse/finger speed from the beginning of movement -> to -> 3 seconds? 
Data analysis tool, (integrate math simulator?)



initial notes built: 

Step 1: Setting Up Your Environment
1. Install Python and Django
pip install django

2. Set Up a Virtual Environment
A virtual environment helps to manage dependencies for your project.

python -m venv thisenv
source thisenv/bin/activate

3. Install Necessary Packages
Install Django in your virtual environment:

pip install django


Step 2: Starting a Django Project
Create a new Django project using the following command:

django-admin startproject djangoserver
cd djangoserver


-=---
connected to github at https://github.com/kenfuciousd/portfolio
--

python manage.py startapp mydjangoapp


... http://localhost:8000

http://127.0.0.1:8000/admin

other manage.py commands
python manage.py collectstatic # updating static files like CSS d

python manage.py runsslserver


SSL Server updates
Install django-sslserver:
	pip install django-sslserver

Add sslserver to Your Installed Apps:
	In your settings.py, add sslserver to the INSTALLED_APPS list:
INSTALLED_APPS = [
    ...
    'sslserver',
]

Run the Development Server with HTTPS:
	Start the development server with the runsslserver command:
python manage.py runsslserver
You can now access your application over HTTPS at https://127.0.0.1:8000/.


python manage.py createsuperuser
superuser:
admin
@dm1n1str4t0r


---

Pt 2. 
"anonymous" delivery app - general gpt suggestions and notes

users assigned tokens / key

User Database:
	Store information about users (couriers and clients).
	Include fields like user ID, name, contact details, and role (courier or client).

Package Database:
	Store information about packages.
	Include fields like package ID, description, weight, dimensions, and status.

Delivery Database:
	Store information about deliveries.
	Include fields like delivery ID, package ID, courier ID, client ID, pickup location, drop-off location, and delivery status.

Network Segmentation -- will need to impliment this later. 
	Micro-segmentation:
		Use virtual private clouds (VPCs) and network access control lists (ACLs) to segment the network.
		BASH example:
			# Example: AWS VPC configuration
			aws ec2 create-vpc --cidr-block 10.0.0.0/16
			aws ec2 create-subnet --vpc-id vpc-12345 --cidr-block 10.0.1.0/24
			aws ec2 create-security-group --group-name app-sg --description "Application Security Group" --vpc-id vpc-12345
			aws ec2 authorize-security-group-ingress --group-id sg-12345 --protocol tcp --port 80 --cidr 10.0.0.0/16

Device Security
	Endpoint Protection:

		Enforce device compliance checks using MDM solutions.
		Use endpoint detection and response (EDR) tools for continuous monitoring.
		BASH: 
			# Example: Intune configuration for device compliance
			az intune device configuration create --name "Device Compliance Policy" --platform ios --os

Application Security
	Secure Coding Practices:
		Follow secure coding guidelines and perform regular code reviews.
		Use Django’s security features, such as CSRF protection, XSS protection, and SQL injection prevention.


Vulnerability Assessments:
	Perform regular vulnerability assessments using tools like OWASP ZAP or Nessus.
	Fix identified vulnerabilities promptly.
	BASH 
		# Example: Running OWASP ZAP
			zap-cli start
			zap-cli open-url http://your-app-url
			zap-cli spider http://your-app-url
			zap-cli active-scan http://your-app-url

Data Protection
	Encryption:
		Encrypt data at rest using database encryption.
		Encrypt data in transit using HTTPS/TLS.

Role-Based Access Control:
	Use Django’s permissions framework to restrict data access.

SIEM Integration:
	Integrate with a SIEM solution for real-time monitoring and alerting.
		bash
			# Example: Configuring Fluentd to send logs to a SIEM
			fluentd -c /path/to/your/fluentd.conf

Behavior Analytics:
	Use machine learning models to analyze user behavior and detect anomalies.
	bash
		# Example: Integrating with AWS GuardDuty
		aws guardduty create-detector
		aws guardduty get-findings

Automation and Orchestration
	Security Policy Enforcement:
		Use automation tools like Ansible or Terraform to enforce security policies.
		bash\
			# Example: Ansible playbook for enforcing security policies
			ansible-playbook -i inventory.yml playbook.yml

Incident Response:
	Automate incident response using tools like AWS Lambda or Azure Functions.
	example
		# Example: AWS Lambda function for incident response
			import boto3
			def lambda_handler(event, context):
			    ec2 = boto3.client('ec2')
			    response = ec2.describe_instances()
			    # Your incident response logic
			    return response
---- 
Next section of notes

Next steps - 
	Database solidification and layout, correlation with web front end. 
		\ think through the model. Build some documentation for it. solidify layout
		\ User roles / processes
		\ item/package processes. 
		\ build with zero trust and anonymity in mind. (gotta review here)
	build "User account" area.
		\ build courier specific page. they get alerts when an order is placed, asking if they wnat to deliver
		\ Security mechanisms. MFA type ideas: maybe passphrases, generated QR codes with public keys, or 
			\ built in zero trust methods like generating passphrases/One-Time-Token/Pins 
			\ ... these security methods should be easy-access, push button affairs with links explaining in simple terms
	build a 'marketplace'
		\ where the vendor's products are available. 
		\ build a 'vendor' area for sellers. It's their job to allow orders and processing, they create a request
			\ which is sent to the api to build a package for delivery 		
		\ the 'vendor' specific page should be able to change, add, update, delete, bulk load,
			\ also turn off / on availability for items or whole store. "vendor view" vs external "store view"?
	storefront
	build admin account area

User roles / process workflow:
	Vendor -> place items on Marketplace, prepare packages for delivery
	Customer -> view Market, create orders/deliveries, accept deliveries and confirm
	Courier -> view available deliveries, select them, confirm pickup, confirm delivery + evidence (zero trust methods..)
	Admin -> review transactions, administrate data (refunds, help, disputes, etc)
	Blog -> blog poster


Database layout
	\User
		\id (key), info for customer and courier - all private data handled same
	\Package     <-- the "items" available in the shop (? maybe this needs to spread its functions out to other spots)
		\id -- 
	\Delivery    <-- an "Order" - placed by the customer User, should be open to api calls with proper validation
		\ this is kinda the audit database actually.. 
	\Market      <-- the catalog, the layout options, ordering, etc. the shop in between customer and vendor
		\the 'shop' page, populated with packages from vendors. 
	\Vendor      <-- The seller. have business id as key? or even anonymous options here too with random oid. 

-- 
after updating the database model
python manage.py makemigrations
python manage.py migrate

----

key exchange - the Diffe Helmann algorithm
https://github.com/Descent098/Diffie-Hellman
 - TLDR: generates common secrets with two users each using their own private/public key, such that
g^(a) mod p = A
g^(b) mod p = B
B^a mod p = common secret
A^b mod p = common secret
The common secret is then used to encrypt the data; each user should be able to decrypt it from that. 

python manage.py collectstatic